import{n as l}from"./chunk-IHJXRI23.js";import{V as p,a as y,b as c,wa as d}from"./chunk-LGPHYK4G.js";var P=(n=>(n.Pending="Pending",n.Processed="Processed",n.Paid="Paid",n))(P||{});var m=[{id:"PER-2025-03",startDate:"2025-03-01",endDate:"2025-03-31",status:"Pending"},{id:"PER-2025-02",startDate:"2025-02-01",endDate:"2025-02-28",status:"Processed"},{id:"PER-2025-01",startDate:"2025-01-01",endDate:"2025-01-31",status:"Paid"},{id:"PER-2024-12",startDate:"2024-12-01",endDate:"2024-12-31",status:"Paid"},{id:"PER-2024-11",startDate:"2024-11-01",endDate:"2024-11-30",status:"Paid"},{id:"PER-2024-10",startDate:"2024-10-01",endDate:"2024-10-31",status:"Paid"}];var u=[{id:"EMP-001-PER-2025-01",employeeId:"EMP-001",periodId:"PER-2025-01",grossPay:6250,deductions:[{type:"Federal Tax",amount:1250,percentage:.2},{type:"Health Insurance",amount:200}],netPay:4800,paymentDate:"2025-01-31"},{id:"EMP-002-PER-2025-01",employeeId:"EMP-002",periodId:"PER-2025-01",grossPay:5e3,deductions:[{type:"Income Tax",amount:1e3,percentage:.2},{type:"National Insurance",amount:150}],netPay:3850,paymentDate:"2025-01-31"},{id:"EMP-005-PER-2025-02",employeeId:"EMP-005",periodId:"PER-2025-02",grossPay:6833.33,deductions:[{type:"Income Tax",amount:1366.67,percentage:.2},{type:"Social Security",amount:250}],netPay:5216.66,paymentDate:"2025-02-28"},{id:"EMP-001-PER-2024-12",employeeId:"EMP-001",periodId:"PER-2024-12",grossPay:6250,deductions:[{type:"Federal Tax",amount:1250,percentage:.2},{type:"Health Insurance",amount:200}],netPay:4800,paymentDate:"2024-12-31"},{id:"EMP-002-PER-2024-12",employeeId:"EMP-002",periodId:"PER-2024-12",grossPay:5e3,deductions:[{type:"Income Tax",amount:1e3,percentage:.2},{type:"National Insurance",amount:150}],netPay:3850,paymentDate:"2024-12-31"},{id:"EMP-001-PER-2024-11",employeeId:"EMP-001",periodId:"PER-2024-11",grossPay:6250,deductions:[{type:"Federal Tax",amount:1250,percentage:.2},{type:"Health Insurance",amount:200}],netPay:4800,paymentDate:"2024-11-30"},{id:"EMP-002-PER-2024-11",employeeId:"EMP-002",periodId:"PER-2024-11",grossPay:5e3,deductions:[{type:"Income Tax",amount:1e3,percentage:.2},{type:"National Insurance",amount:150}],netPay:3850,paymentDate:"2024-11-30"},{id:"EMP-001-PER-2024-10",employeeId:"EMP-001",periodId:"PER-2024-10",grossPay:6250,deductions:[{type:"Federal Tax",amount:1250,percentage:.2},{type:"Health Insurance",amount:200}],netPay:4800,paymentDate:"2024-10-31"},{id:"EMP-002-PER-2024-10",employeeId:"EMP-002",periodId:"PER-2024-10",grossPay:5e3,deductions:[{type:"Income Tax",amount:1e3,percentage:.2},{type:"National Insurance",amount:150}],netPay:3850,paymentDate:"2024-10-31"}];var g=class i{employees=d(l);payPeriods=d(m);payslips=d(u);getEmployees(){return this.employees.asReadonly()}getPayPeriods(){return this.payPeriods.asReadonly()}getPayslips(){return this.payslips.asReadonly()}getPayslipsByEmployeeId(a){return d(this.payslips().filter(e=>e.employeeId===a))}getPayslipById(a){return this.payslips().find(e=>e.id===a)}calculatePayslip(a,e){let n=this.daysBetween(e.startDate,e.endDate),r=a.baseSalary/365*n,s=[{type:"Income Tax",percentage:.2,amount:r*.2},{type:"Health Insurance",amount:200}],o=s.reduce((f,D)=>f+D.amount,0),I=r-o+(a.bonus?a.bonus/12:0);return{id:`${a.id}-${e.id}`,employeeId:a.id,periodId:e.id,grossPay:r,deductions:s,netPay:I,paymentDate:e.endDate}}processPayroll(a){let e=this.payPeriods().find(t=>t.id===a);if(!e||e.status!=="Pending")return;let n=this.employees().filter(t=>t.status==="Active").map(t=>this.calculatePayslip(t,e));this.payslips.update(t=>[...t,...n]),this.payPeriods.update(t=>t.map(r=>r.id===a?c(y({},r),{status:"Processed"}):r))}daysBetween(a,e){let n=new Date(a);return(new Date(e).getTime()-n.getTime())/(1e3*3600*24)+1}static \u0275fac=function(e){return new(e||i)};static \u0275prov=p({token:i,factory:i.\u0275fac,providedIn:"root"})};var E=class i{getActiveEmployeeCount(a){return a.filter(e=>e.status==="Active").length}getLastProcessedPayrollCost(a,e){return this.getProcessedPayslips(a,e).reduce((t,r)=>t+r.netPay,0)}getProcessedPayslips(a,e){let n=new Map;return e.forEach(t=>n.set(t.id,t)),a.filter(t=>n.get(t.periodId)?.status==="Processed")}getPaidPayslips(a,e){let n=new Map;return e.forEach(t=>n.set(t.id,t)),a.filter(t=>n.get(t.periodId)?.status==="Paid")}getPayslipsWithDetails(a,e,n){return a.map(t=>{let r=e.find(o=>o.id===t.employeeId),s=n.find(o=>o.id===t.periodId);return{payslip:t,employeeName:r?.name||t.employeeId,periodStatus:s?.status||"Pending"}})}calculateMonthlyPayrollCosts(a,e){let n=new Map;e.forEach(r=>n.set(r.id,r));let t={};return a.forEach(r=>{let s=n.get(r.periodId);if(s&&(s.status==="Processed"||s.status==="Paid")){let o=s.endDate.substring(0,7);t[o]||(t[o]=0),t[o]+=r.netPay}}),t}getTotalDeductionsByType(a){let e={};return a.forEach(n=>{n.deductions.forEach(t=>{let r=t.type;e[r]||(e[r]=0),e[r]+=t.amount})}),e}calculateAverageSalary(a){let e=a.filter(t=>t.status==="Active");return e.length===0?0:e.reduce((t,r)=>t+r.baseSalary,0)/e.length}formatMonthLabel(a){let[e,n]=a.split("-");return new Date(parseInt(e),parseInt(n)-1,1).toLocaleDateString(void 0,{month:"short",year:"numeric"})}getDepartmentPayrollDistribution(a,e){let n={},t=new Map;return e.forEach(r=>t.set(r.id,r)),a.forEach(r=>{let s=t.get(r.employeeId);s?.department&&(n[s.department]||(n[s.department]=0),n[s.department]+=r.netPay)}),n}static \u0275fac=function(e){return new(e||i)};static \u0275prov=p({token:i,factory:i.\u0275fac,providedIn:"root"})};export{P as a,g as b,E as c};
